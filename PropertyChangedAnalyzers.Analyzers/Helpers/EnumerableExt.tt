<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="generated.txt" #>
namespace PropertyChangedAnalyzers
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.Text;

    internal static partial class EnumerableExt
    {
<#
    var typeNames = new Data[]
    {
        new Data("IReadOnlyList<T>", "T", null),
        new Data("ImmutableArray<T>", "T", null),
        new Data("ChildSyntaxList", "SyntaxNodeOrToken", null),
        new Data("SeparatedSyntaxList<T>", "T", "SyntaxNode"),
        new Data("SyntaxList<T>", "T", "SyntaxNode"),
        new Data("SyntaxNodeOrTokenList", "SyntaxNodeOrToken", null),
        new Data("SyntaxTokenList", "SyntaxToken", null),
        new Data("SyntaxTriviaList", "SyntaxTrivia", null),
    };

    foreach(var types in typeNames)
    {
        var colName = types.CollectionType;
        var itemName = types.ItemType;
        var constraint = types.Constraint;
#>

        internal static bool TryGetAtIndex<<#= itemName #>>(this <#= colName #> source, int index, out <#= itemName #> result)<#= constraint #>
        {
            result = default(<#= itemName #>);
            if (source == null)
            {
                return false;
            }

            if (source.Count <= index)
            {
                return false;
            }

            result = source[index];
            return true;
        }

        internal static bool TryGetSingle<<#= itemName #>>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            if (source.Count == 1)
            {
                result = source[0];
                return true;
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetSingle<<#= itemName #>>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            foreach (var item in source)
            {
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetFirst<<#= itemName #>>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            if (source.Count == 0)
            {
                result = default(<#= itemName #>);
                return false;
            }

            result = source[0];
            return true;
        }

        internal static bool TryGetFirst<<#= itemName #>>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            foreach (var item in source)
            {
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }

        internal static bool TryGetLast<<#= itemName #>>(this <#= colName #> source, out <#= itemName #> result)<#= constraint #>
        {
            if (source.Count == 0)
            {
                result = default(<#= itemName #>);
                return false;
            }

            result = source[source.Count - 1];
            return true;
        }

        internal static bool TryGetLast<<#= itemName #>>(this <#= colName #> source, Func<<#= itemName #>, bool> selector, out <#= itemName #> result)<#= constraint #>
        {
            for (var i = source.Count - 1; i >= 0; i--)
            {
                var item = source[i];
                if (selector(item))
                {
                    result = item;
                    return true;
                }
            }

            result = default(<#= itemName #>);
            return false;
        }
<#  }    #>
    }
}
<#+
internal class Data
{
    public readonly string CollectionType;
    public readonly string ItemType;
    public readonly string Constraint;

    public Data(string collectionType, string itemType, string constraint)
    {
        this.CollectionType = collectionType;
        this.ItemType = itemType;
        this.Constraint = string.IsNullOrEmpty(constraint)
            ? string.Empty
            : "\r\n            where T: " + constraint;
    }
}
#>
